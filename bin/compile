#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ] && [ "$STACK" != "heroku-18" ]; then
	echo "Need heroku-16 or heroku-18 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir "$ENV_DIR"
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}
export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

echo "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR

export PATH="${BUILD_DIR}/.heroku/dotnet:${PATH}"

cd $BUILD_DIR

trim() {
    # Determine if 'extglob' is currently on.
    local extglobWasOff=1
    shopt extglob >/dev/null && extglobWasOff=0 
    (( extglobWasOff )) && shopt -s extglob # Turn 'extglob' on, if currently turned off.
    # Trim leading and trailing whitespace
    local var=$1
    var=${var##+([[:space:]])}
    var=${var%%+([[:space:]])}
    (( extglobWasOff )) && shopt -u extglob # If 'extglob' was off before, turn it back off.
    echo -n "$var"  # Output trimmed string.
}

if [ -e ${BUILD_DIR}/Projfile ]; then
	PROJECT_FILE=$(trim "$(cat Projfile)")
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
	echo "found projfile project ${PROJECT_NAME} at ${PROJECT_FILE}"
else
	if [ -z ${PROJECT_FILE:-} ]; then
		PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
	fi

	if [ -z ${PROJECT_NAME:-} ]; then
		PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
	fi
fi

if [ -n "$(cat $PROJECT_FILE | grep 'netcoreapp2.0')" ]; then
	topic "WARNING"
	echo "For netcoreapp2.0 use https://github.com/jincod/dotnetcore-buildpack#v2.1.200" | indent
	echo "More info https://github.com/jincod/dotnetcore-buildpack/issues/44" | indent
fi

echo "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE -property:Heroku=true --output ${BUILD_DIR}/heroku_output --configuration Release --runtime linux-x64

echo "cleanup"
dotnet_cleanup $BUILD_DIR $CACHE_DIR

if [ ! -f ${BUILD_DIR}/Procfile ]; then
	cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ./${PROJECT_NAME}
EOT
else
	topic "WARNING"
	echo "Be careful with custom Procfile" | indent
fi
